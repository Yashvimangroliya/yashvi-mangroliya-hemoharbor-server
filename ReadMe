# Project Title
HemoHarbor (Blood-Bank)
## Overview

HemoHarbor is a blood bank app designed to efficiently manage the storage, testing, and distribution of blood donations for medical facilities and patients in need.

### Problem

The app is needed to address the challenges associated with blood banking, including the safe storage and timely distribution of blood to the right patients, as well as the need for accurate record-keeping and inventory management.

### User Profile
Donar, Hospital, BloodBanks and any other organisation can use this app to get blood quickly.They can see through analysis that how much blood is available.

### Features

-User-friendly interface for blood request and tracking.
-Inventory management for blood bank staff.
-Secure patient information storage.

## Implementation

### Tech Stack

Frontend: React
Backend: Node.js
Database: MongoDB
Libraries: Redux for state management, Express for backend development

### APIs

List any external sources of data that will be used in your app.

### Sitemap

-Register
-Donor
-Inventory
-Hospital
-Organisation
-Donation

### Mockups

Provide visuals of your app's screens. You can use tools like Figma or pictures of hand-drawn sketches.

### Data

Describe your data and the relationships between them. You can show this visually using diagrams, or write it out. 

### End-Point

Get-http://localhost:8080/api/inventory/get-inventory
Get-http://localhost:8080/api/admin/org-list
Get-http://localhost:8080/api/admin/donar-list
Get-http://localhost:8080/api/admin/hospital-list
Get-http://localhost:8080/api/analytics/bloodGroups-data
Get-http://localhost:8080/api/auth/current-user
Post-http://localhost:8080/api/auth/register
Post-http://localhost:8080/api/inventory/create-inventory
Post-http://localhost:8080/api/auth/login
Post-

### Auth

Does your project include any login or user profile functionality? If so, describe how authentication/authorization will be implemented.

## Roadmap

Scope your project as a sprint. Break down the tasks that will need to be completed and map out timeframes for implementation. Think about what you can reasonably complete before the due date. The more detail you provide, the easier it will be to build.

## Nice-to-haves

I'll work on styling so that, it's become more user friendly.
